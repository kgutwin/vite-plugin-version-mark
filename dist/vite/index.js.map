{"version":3,"sources":["../../src/plugins/core/main.ts","../../src/plugins/vite.ts"],"sourcesContent":["import childProcess from 'child_process'\n\nexport interface VitePluginVersionMarkInput {\n  name?: string\n  version?: string\n  ifGitSHA?: boolean\n  ifShortSHA?: boolean\n  gitCommand?: string\n  ifMeta?: boolean\n  ifLog?: boolean\n  ifGlobal?: boolean\n}\n\nconst getGitSHA = (ifShortSHA: boolean, gitCommand: string | undefined) => {\n  const {exec} = childProcess\n  let sh: string\n  if (gitCommand) {\n    sh = gitCommand\n  } else if (ifShortSHA) {\n    sh = 'git rev-parse --short HEAD'\n  } else {\n    sh = 'git rev-parse HEAD'\n  }\n\n  return new Promise((resolve, reject) => {\n    exec(sh, (error, stdout) => {\n      if (error) {\n        reject(error)\n      } else {\n        const output = stdout.toString()?.replace('\\n', '')\n        resolve(output)\n      }\n    })\n  })\n}\n\nexport const analyticOptions = async (options: VitePluginVersionMarkInput) => {\n  const {\n    name = process.env['npm_package_name'],\n    version = process.env['npm_package_version'],\n    ifGitSHA = false,\n    ifShortSHA = true,\n    gitCommand = undefined,\n    ifMeta = true,\n    ifLog = true,\n    ifGlobal = true,\n  } = options\n\n  const printVersion = ifGitSHA ? await getGitSHA(ifShortSHA, gitCommand) : version\n  const printName = `${name?.replace(/((?!\\w).)/g, '_')?.toLocaleUpperCase?.()}_VERSION`\n  const printInfo = `${printName}: ${printVersion}`\n\n  return {\n    ifMeta,\n    ifLog,\n    ifGlobal,\n    printVersion,\n    printName,\n    printInfo,\n  }\n}\n","import {VitePluginVersionMarkInput, analyticOptions} from './core/main'\nimport type {Plugin, IndexHtmlTransformResult} from 'vite'\n\nexport const vitePluginVersionMark: (options?: VitePluginVersionMarkInput) => Plugin = (options = {}) => {\n  return {\n    name: 'vite-plugin-version-mark',\n\n    async transformIndexHtml() {\n      const {\n        ifMeta,\n        ifLog,\n        ifGlobal,\n        printVersion,\n        printName,\n        printInfo,\n      } = await analyticOptions(options)\n\n      const els: IndexHtmlTransformResult = []\n      ifMeta && els.push({\n        tag: 'meta',\n        injectTo: 'head-prepend',\n        attrs: {\n          name: 'application-name',\n          content: printInfo,\n        },\n      })\n      ifLog && els.push({\n        tag: 'script',\n        injectTo: 'body',\n        children: `console.log(\"${printInfo}\")`\n      })\n      ifGlobal && els.push({\n        tag: 'script',\n        injectTo: 'body',\n        children: `__${printName}__ = \"${printVersion}\"`\n      })\n\n      return els\n    },\n  }\n}\n"],"mappings":";AAAA,OAAO,kBAAkB;AAazB,IAAM,YAAY,CAAC,YAAqB,eAAmC;AACzE,QAAM,EAAC,KAAI,IAAI;AACf,MAAI;AACJ,MAAI,YAAY;AACd,SAAK;AAAA,EACP,WAAW,YAAY;AACrB,SAAK;AAAA,EACP,OAAO;AACL,SAAK;AAAA,EACP;AAEA,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,SAAK,IAAI,CAAC,OAAO,WAAW;AAC1B,UAAI,OAAO;AACT,eAAO,KAAK;AAAA,MACd,OAAO;AACL,cAAM,SAAS,OAAO,SAAS,GAAG,QAAQ,MAAM,EAAE;AAClD,gBAAQ,MAAM;AAAA,MAChB;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;AAEO,IAAM,kBAAkB,OAAO,YAAwC;AAC5E,QAAM;AAAA,IACJ,OAAO,QAAQ,IAAI;AAAA,IACnB,UAAU,QAAQ,IAAI;AAAA,IACtB,WAAW;AAAA,IACX,aAAa;AAAA,IACb,aAAa;AAAA,IACb,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,WAAW;AAAA,EACb,IAAI;AAEJ,QAAM,eAAe,WAAW,MAAM,UAAU,YAAY,UAAU,IAAI;AAC1E,QAAM,YAAY,GAAG,MAAM,QAAQ,cAAc,GAAG,GAAG,oBAAoB;AAC3E,QAAM,YAAY,GAAG,cAAc;AAEnC,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ACzDO,IAAM,wBAA0E,CAAC,UAAU,CAAC,MAAM;AACvG,SAAO;AAAA,IACL,MAAM;AAAA,IAEN,MAAM,qBAAqB;AACzB,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,IAAI,MAAM,gBAAgB,OAAO;AAEjC,YAAM,MAAgC,CAAC;AACvC,gBAAU,IAAI,KAAK;AAAA,QACjB,KAAK;AAAA,QACL,UAAU;AAAA,QACV,OAAO;AAAA,UACL,MAAM;AAAA,UACN,SAAS;AAAA,QACX;AAAA,MACF,CAAC;AACD,eAAS,IAAI,KAAK;AAAA,QAChB,KAAK;AAAA,QACL,UAAU;AAAA,QACV,UAAU,gBAAgB;AAAA,MAC5B,CAAC;AACD,kBAAY,IAAI,KAAK;AAAA,QACnB,KAAK;AAAA,QACL,UAAU;AAAA,QACV,UAAU,KAAK,kBAAkB;AAAA,MACnC,CAAC;AAED,aAAO;AAAA,IACT;AAAA,EACF;AACF;","names":[]}